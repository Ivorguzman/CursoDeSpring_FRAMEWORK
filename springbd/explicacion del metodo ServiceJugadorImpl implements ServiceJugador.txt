
/*
 * LA clase que implementa una interfaz
 * llamada ServiceJugador. Esta interfaz define un método registrar
 * que recibe un objeto de tipo Jugador y puede lanzar una excepción.
 * 
 * La clase ServiceJugadorImpl usa la anotación @Autowired para
 * inyectar una dependencia de tipo DAOJugador, que es una clase que
 * se encarga de acceder a la base de datos y guardar el objeto
 * Jugador.
 * 
 * El método registrar de la clase ServiceJugadorImpl usa un bloque
 * try-catch para manejar posibles errores al llamar al método
 * registrar del DAOJugador. Si ocurre una excepción, la reenvía al
 * método que lo invocó
 * 
 * El código es un ejemplo de una clase que implementa una interfaz
 * llamada ServiceJugador. Esta interfaz define un método registrar
 * que recibe un objeto de tipo Jugador y puede lanzar una excepción.
 * 
 * La clase ServiceJugadorImpl usa la anotación @Autowired para
 * inyectar una dependencia de tipo DAOJugador, que es una clase que
 * se encarga de acceder a la base de datos y guardar el objeto
 * Jugador.
 * 
 * El método registrar de la clase ServiceJugadorImpl usa un bloque
 * try-catch para manejar posibles errores al llamar al método
 * registrar del DAOJugador. Si ocurre una excepción, la reenvía al
 * método que lo invocó.
 * 
 * Ahora vamos a ver cada línea del código:
 * 
 * package com.mitoCode.service; Esta línea indica que la clase
 * ServiceJugadorImpl pertenece al paquete com.mitoCode.service. Los
 * paquetes en Java sirven para agrupar clases relacionadas y evitar
 * conflictos de nombres.
 * 

  import org.springframework.beans.factory.annotation.Autowired;
  Esta línea importa la anotación @Autowired de la librería Spring
  Framework. Spring es un framework muy popular para desarrollar
  aplicaciones web basadas en Java. 


 


  [import com.mitoCode.beans.Jugador]; Esta línea importa la clase
  Jugador del paquete com.mitoCode.beans. Esta clase representa un
  jugador de fútbol con los atributos que indica su clase y sus
  metodos si es que los tuviera. 
  Esta clase se usa como un modelo de datos para guardar y
  recuperar información de la base de datos.

  [import com.mitoCode.dao.DAOJugador]; Esta línea importa la interfaz
  [DAOJugador]del paquete [com.mitoCode.dao]
  DAO significa [Data Access Object]  y es un patrón de diseño
  que separa la lógica de acceso a datos de la lógica de negocio. 

  La interfaz [DAOJugador] define los métodos que se deben implementar 
  para interactuar con la base de datos de jugadores, como registrar,
  actualizar, eliminar, etc.

  La implementación concreta de esta interfaz depende del tipo de base
  de datos que se use, por ejemplo, MySQL, MongoDB, etc.

  [public class ServiceJugadorImpl implements ServiceJugador].
  Esta línea declara la clase ServiceJugadorImpl como pública, lo que
  significa que se puede acceder desde cualquier otro paquete. 

  La clase implementa la interfaz [ServiceJugador], lo que significa
  que debe definir el método registrar que esta interfaz declara. 
  La interfaz [ServiceJugador] representa la capa de servicio de la
  aplicación, que se encarga de la lógica de negocio y de
  comunicarse con la capa de datos (DAO).

  @Autowired Esta línea es una anotación que le dice a Spring que
  inyecte una instancia de una clase que implementa la interfaz
  [DAOJugador] en el atributo daoJugador de la clase
  [ServiceJugadorImpl]. Esto evita tener que crear manualmente el
  objeto daoJugador usando el operador [new] o un método estático.
	Esto se llama inyección de dependencias y es
  una forma de desacoplar el código y facilitar el mantenimiento y
  las pruebas.

  Spring se encarga de buscar la implementación adecuada del
  [DAOJugador] según la configuración de la aplicación y de crear el
  objeto con el alcance y el ciclo de vida apropiados.

  [private DAOJugador daoJugador]; Esta línea declara el atributo
  [daoJugador] de tipo [DAOJugador] y con el modificador de acceso
  private lo que significa que solo se puede acceder desde la misma
  clase.Este atributo representa la dependencia que tiene la clase
  [ServiceJugadorImpl] con la capa de datos.
  Al usar la anotación @Autowired, no hace falta inicializar
  este atributo conun valor, ya que Spring se encarga de hacerlo.
  
 * @Override Esta línea es una anotación que indica que el método que
 * sigue sobrescribe un método de la clase o interfaz que se extiende
 * o implementa. En este caso, el método registrar sobrescribe el
 * método registrar de la interfaz ServiceJugador.
 * public void registrar(Jugador jugador) throws Exception { Esta
 * línea declara el método registrar como público, lo que significa
 * que se puede acceder desde cualquier otro paquete. El método no
 * devuelve ningún valor, por lo que se usa la palabra reservada
 * void. El método recibe un parámetro de tipo Jugador llamado
 * jugador, que representa el objeto que se quiere guardar en la base
 * de datos. El método puede lanzar una excepción de tipo Exception,
 * lo que significa que cualquier error que ocurra dentro del método
 * debe ser manejado por el método que lo invoca o propagado hasta el
 * nivel más alto de la aplicación.
 * try{ Esta línea abre un bloque try, que es una estructura de
 * control que permite ejecutar un código que puede generar una
 * excepción y capturarla si ocurre. En este caso, el código que se
 * quiere ejecutar es el que llama al método registrar del
 * daoJugador.
 * this.daoJugador.registrar(jugador); Esta línea llama al método
 * registrar del atributo daoJugador, pasándole el parámetro jugador.
 * Este método se encarga de guardar el objeto jugador en la base de
 * datos usando la implementación específica del DAOJugador que
 * Spring haya inyectado. La palabra reservada this se usa para
 * referirse al atributo daoJugador de la clase actual y evitar
 * confusiones con el parámetro jugador que tiene el mismo nombre. Si
 * el método registrar del daoJugador genera una excepción, esta se
 * capturará en el bloque catch que sigue.
 * } catch(Exception ex){ Esta línea abre un bloque catch, que es una
 * estructura de control que permite capturar una excepción que haya
 * ocurrido en el bloque try y manejarla de alguna forma. En este
 * caso, se captura cualquier excepción de tipo Exception o de sus
 * subclases y se le asigna el nombre ex. El bloque catch solo se
 * ejecuta si ocurre una excepción en el bloque try, de lo contrario
 * se salta.
 * throw ex; Esta línea lanza la excepción capturada en el bloque
 * catch al método que invocó al método registrar de la clase
 * ServiceJugadorImpl. Esto significa que el método registrar no
 * maneja la excepción, sino que la reenvía al nivel superior de la
 * aplicación. Esto puede ser útil para centralizar el manejo de
 * errores en una sola clase o para mostrar un mensaje de error al
 * usuario.
 * } Esta línea cierra el bloque catch y el método registrar.
 */